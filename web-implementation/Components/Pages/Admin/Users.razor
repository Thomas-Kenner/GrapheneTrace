@page "/admin/users"
@rendermode InteractiveServer
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin")]
@using GrapheneTrace.Web.Models
@using GrapheneTrace.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManagementService UserManagementService
@inject NavigationManager Navigation

@*
    Admin Users Management Page
    Author: SID:2402513
    Route: /admin/users

    Purpose: Manage all users in the system - view, create, edit, delete.

    Authorization: Restricted to Admin role only using [Authorize(Roles = "Admin")].
    Users without the Admin role will receive a 403 Forbidden and be redirected to /access-denied.

    Features: User list with inline editing and delete functionality, create new user dialog.
*@

<div class="admin-container">
    <!-- Header/Navigation -->
    <div class="admin-header">
        <div class="header-left">
            <span class="header-brand">Admin Dashboard</span>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab" @onclick="GoToDashboard">Dashboard</button>
            <button class="nav-tab active">Users</button>
            <button class="nav-tab" @onclick="GoToSettings">Settings</button>
            <button class="nav-tab">Support</button>
        </div>

        <div class="header-right">
            <input type="text" class="search-input" placeholder="Search..." @oninput="OnSearchChange" />
            <div class="user-avatar"></div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="admin-content">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem;">
            <h2 class="section-title">Users Management</h2>
            <button class="btn btn-primary" @onclick="() => showCreateModal = true">
                + Create New User
            </button>
        </div>

        @if (isLoading)
        {
            <p>Loading users...</p>
        }
        else if (users == null || users.Count == 0)
        {
            <p style="color: var(--muted-foreground);">No users found</p>
        }
        else
        {
            <div class="users-table-container">
                <table class="users-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (filteredUsers != null)
                        {
                            @foreach (var user in filteredUsers)
                            {
                                <tr>
                                <td>@user.FullName</td>
                                <td>@user.Email</td>
                                <td>
                                    <span class="user-type-badge" style="background-color: @GetUserTypeColor(user.UserType)">
                                        @user.UserType
                                    </span>
                                </td>
                                <td>
                                    @if (user.DeactivatedAt == null)
                                    {
                                        <span class="status-badge status-active">Active</span>
                                    }
                                    else
                                    {
                                        <span class="status-badge status-inactive">Inactive</span>
                                    }
                                </td>
                                <td>@user.Id.ToString().Substring(0, 8)...</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn-action btn-edit" @onclick="() => EditUser(user)">Edit</button>
                                        <button class="btn-action btn-delete"
                                                @onclick="() => DeleteUser(user.Id)"
                                                disabled="@(user.DeactivatedAt != null)">
                                            Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>

    <!-- Footer -->
    <div class="admin-footer">
        <p>Contact us · About · FAQ</p>
    </div>
</div>

<!-- Create User Modal -->
@if (showCreateModal)
{
    <div class="modal-overlay" @onclick="() => showCreateModal = false">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Create New User</h3>
                <button class="modal-close" @onclick="() => showCreateModal = false">×</button>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label">First Name</label>
                    <input type="text" class="form-input" @bind="newUser.FirstName" placeholder="John" />
                </div>

                <div class="form-group">
                    <label class="form-label">Last Name</label>
                    <input type="text" class="form-input" @bind="newUser.LastName" placeholder="Doe" />
                </div>

                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" @bind="newUser.Email" placeholder="john@example.com" />
                </div>

                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input type="password" class="form-input" @bind="newUserPassword" placeholder="Enter password" />
                    <p style="font-size: 0.85rem; color: var(--muted-foreground); margin-top: 0.5rem;">
                        Min 12 chars, uppercase, lowercase, number, special char
                    </p>
                </div>

                <div class="form-group">
                    <label class="form-label">User Type</label>
                    <select class="form-input" @bind="newUser.UserType">
                        <option value="">Select user type</option>
                        <option value="admin">Admin</option>
                        <option value="clinician">Clinician</option>
                        <option value="patient">Patient</option>
                    </select>
                </div>

                @if (!string.IsNullOrEmpty(createMessage))
                {
                    <div class="alert" style="background-color: @(createSuccess ? "#d4edda" : "#f8d7da"); color: @(createSuccess ? "#155724" : "#721c24"); padding: 1rem; border-radius: var(--radius); margin-bottom: 1rem;">
                        @createMessage
                    </div>
                }
            </div>

            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="() => showCreateModal = false">Cancel</button>
                <button class="btn btn-primary" @onclick="CreateUser" disabled="@(string.IsNullOrEmpty(newUser.Email) || string.IsNullOrEmpty(newUserPassword))">
                    Create User
                </button>
            </div>
        </div>
    </div>
}

<!-- Edit User Modal -->
@if (showEditModal && editingUser != null)
{
    <div class="modal-overlay" @onclick="() => showEditModal = false">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Edit User</h3>
                <button class="modal-close" @onclick="() => showEditModal = false">×</button>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label">First Name</label>
                    <input type="text" class="form-input" @bind="editingUser.FirstName" />
                </div>

                <div class="form-group">
                    <label class="form-label">Last Name</label>
                    <input type="text" class="form-input" @bind="editingUser.LastName" />
                </div>

                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" @bind="editingUser.Email" />
                </div>

                <div class="form-group">
                    <label class="form-label">User Type</label>
                    <select class="form-input" @bind="editingUser.UserType">
                        <option value="admin">Admin</option>
                        <option value="clinician">Clinician</option>
                        <option value="patient">Patient</option>
                    </select>
                </div>

                @if (!string.IsNullOrEmpty(editMessage))
                {
                    <div class="alert" style="background-color: @(editSuccess ? "#d4edda" : "#f8d7da"); color: @(editSuccess ? "#155724" : "#721c24"); padding: 1rem; border-radius: var(--radius); margin-bottom: 1rem;">
                        @editMessage
                    </div>
                }
            </div>

            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="() => showEditModal = false">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveUser">Save Changes</button>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUser>? users;
    private List<ApplicationUser>? filteredUsers;
    private ApplicationUser? editingUser;
    private ApplicationUser newUser = new();
    private string newUserPassword = "";
    private string searchQuery = "";
    private bool isLoading = true;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private string createMessage = "";
    private string editMessage = "";
    private bool createSuccess = false;
    private bool editSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        users = await UserManagementService.GetAllUsersAsync();
        filteredUsers = users.Where(u => u.DeactivatedAt == null).ToList();
        isLoading = false;
    }

    private void OnSearchChange(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        FilterUsers();
    }

    private void FilterUsers()
    {
        if (users == null) return;

        filteredUsers = users
            .Where(u => u.DeactivatedAt == null &&
                       (u.FirstName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                        u.LastName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                        (u.Email ?? "").Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    private void EditUser(ApplicationUser user)
    {
        editingUser = new ApplicationUser
        {
            Id = user.Id,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email,
            UserName = user.UserName,
            UserType = user.UserType,
            DeactivatedAt = user.DeactivatedAt
        };
        showEditModal = true;
    }

    private async Task SaveUser()
    {
        if (editingUser == null) return;

        var (success, message) = await UserManagementService.UpdateUserAsync(editingUser);
        editSuccess = success;
        editMessage = message;

        if (success)
        {
            await LoadUsers();
            await Task.Delay(2000);
            showEditModal = false;
        }
    }

    private async Task CreateUser()
    {
        if (string.IsNullOrEmpty(newUser.Email) || string.IsNullOrEmpty(newUserPassword))
        {
            createMessage = "Email and password are required";
            createSuccess = false;
            return;
        }

        newUser.UserName = newUser.Email;

        var (success, message) = await UserManagementService.CreateUserAsync(
            newUser,
            newUserPassword,
            newUser.UserType);

        createSuccess = success;
        createMessage = message;

        if (success)
        {
            newUser = new();
            newUserPassword = "";
            await LoadUsers();
            await Task.Delay(2000);
            showCreateModal = false;
        }
    }

    private async Task DeleteUser(Guid userId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (!confirmed)
            return;

        var (success, message) = await UserManagementService.DeleteUserAsync(userId);

        if (success)
        {
            await LoadUsers();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", message);
        }
    }

    private string GetUserTypeColor(string userType)
    {
        return userType switch
        {
            "admin" => "#030213",
            "clinician" => "#10b981",
            "patient" => "#3b82f6",
            _ => "#6b7280"
        };
    }

    private void GoToDashboard()
    {
        Navigation.NavigateTo("/admin/dashboard");
    }

    private void GoToSettings()
    {
        Navigation.NavigateTo("/admin/settings");
    }

    @inject IJSRuntime JS
}
